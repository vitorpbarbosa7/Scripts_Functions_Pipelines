by(iris, INDICES = data$Species,
function(x) {
mean_pl = mean(x$Petal.Length)
})
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
data
names(data)
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
View(data)
View(tabela_basquete)
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
sqldf('SELECT AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM iris
GROUP BY Species')
sqldf("SELECT equipe, AVG(num_cestas)
FROM tabela_basquete
GROUP BY equipe")
names(data)
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
?by
?apply
mean_pl = c(apply(data[,c(1,2,3,4)], MARGIN = 2, FUN = mean))
source('C:/GD/DS/1Formacao/1BigDataAnalytics_R_Azure_ML/3-FatoresControleFuncoes/07-FamiliaApplyR.R', encoding = 'UTF-8', echo=TRUE)
by(iris, INDICES = data$Species,
function(x) {
mean_pl = c(apply(data[,c(1,2,3,4)], MARGIN = 2, FUN = mean))
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl = c(data$Sepal.Length,data$Sepal.Width)
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl = c(mean(data$Sepal.Length),mean(data$Sepal.Width))
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl = mean(data$Sepal.Length)
})
View(data)
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Sepal.Length)
})
by(iris, INDICES = as.factor(data$Species),
function(x) {
mean_pl <- mean(data$Sepal.Length)
})
levels(data$Species)
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
# novo dat
dat <- data.frame(species=c(rep(c(1,2,3), each=5)),
petal.length=c(rnorm(5, 4.5, 1),
rnorm(5, 4.5, 1),
rnorm(5, 5.5, 1)),
petal.width=c(rnorm(5, 2.5, 1),
rnorm(5, 2.5, 1),
rnorm(5, 4, 1)))
dat
str(data)
dat$species <- factor(dat$species)
View(dat)
by(dat, dat$species, function(x){
# calcular o comprimento médio da pétala para cada espécie
mean.pl <- mean(x$petal.length)
})
str(dat)
str(data)
data = iris
data$Species = factor(data$Species)
str(data)
levels(data$Species)
by(iris, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(data, INDICES = data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(data, data$Species,
function(x) {
mean_pl <- mean(data$Petal.Length)
})
by(data, data$Species, function(x) {
mean_pl <- mean(x$Petal.Length)
})
?apply
by(data, INDICES = data$Species,
function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- c(apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean) # Média
})
sqldf('SELECT AVG(Petal.Length), AVG(Sepal.Length), AVG(Petal.Width), AVG(Sepal.Width), Species
FROM data
GROUP BY Species')
mean_pl <- c(apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean)) # Média
by(data, INDICES = data$Species,
function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- c(apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean)) # Média
})
by(data, INDICES = data$Species,
function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- apply(x[1,2,3,4], #Aplicar a função média sobre esses dados
MARGIN = 2, # Média por coluna
FUN = mean) # Média
})
by(data, data$Species, function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- sapply(x[,c(1,2,3,4)],mean) # E COLOCAR O X AQUI TAMBÉM!
})
by(data, data$Species, function(x) { # LEMBRAR DE COLOXAR O X AQUI
mean_pl <- apply(x[,c(1,2,3,4)],2,mean) # E COLOCAR O X AQUI TAMBÉM!
})
# vapply()
?vapply()
# Lista com dois elementos
lista1 = list(a = c(1:10), b=(45:77))
lista1
lapply(lista1, sum)
sapply(lista1, sum)
?vapply()
fivenum
?fivenum
?vapply()
vapply(lista1,
fivenum)
vapply(lista1,
fivenum)
vapply(x = lista1,
FUN = fivenum,
FUN.VALUE =
c('a' = .0,
'b' = .0,
'c' = .0,
'd' = .0,
'e' = .0))
vapply(X = lista1,
FUN = fivenum,
FUN.VALUE =
c('a' = .0,
'b' = .0,
'c' = .0,
'd' = .0,
'e' = .0))
vapply(X = lista1,
FUN = fivenum,
FUN.VALUE =
c('Min' = .0,
'1stQu' = .0,
'Median' = .0,
'3stQu' = .0,
'Max' = .0))
# replicate
?replicate
# replicate
?replicate(7, runif(1:10))
# replicate
replicate(7, runif(1:10))
#mapply()
mapply(rep, 1:4, 4:1)
?mapply
#mapply()
mapply(rep, 1:3, 4:1)
#mapply()
mapply(rep, 1:4, 3:1)
#mapply()
mapply(rep, 1:4, 4:1)
# rapply()
?rapply()
lista2 = list(a = c(1:5),
b = (6:10))
lista2
rapply(lista2, sum)
rapply(lista2, sum, how = 'list')
library(reticulate)
use_condaenv('py37')
import pandas as pd
ls
library(ggplot2)
library('ggplot2')
hw <- data.frame(Height_cm=c(164, 167, 168, 169, 169, 170, 170, 170, 171, 172, 172, 173, 173, 175, 176, 178),
Weight_kg=c( 54,  57,  58,  60,  61,  60,  61,  62,  62,  64,  62,  62,  64,  56,  66,  70))
#Dado que dados escalonados, padronizados s?o m?ltiplos do desvio padr?o, ent?o > 2 estou dizendo que aquele que for
#2x o desvio padr?o ser? retirado.
height_outlier = abs(scale(hw$Height_cm)) > 2
weight_outlier = abs(scale(hw$Weight_kg)) > 2
#16 ? um c?digo para um dos plot characters
pch = (height_outlier | weight_outlier) * 16
plot(hw,
pch = pch)
install.packages('AnalyzeFMRI')
require(AnalyzeFMRI)
setwd('C:/GD/PosGraduacao/1_Disciplinas/PQI5858/EstudoDeCaso/R_PCA')
setwd('C:/GD/DS/PQI5858/EstudoDeCaso/R_PCA')
nomes = read.csv('datas/nomesvariaveis.csv', encoding = 'UTF-8')
names(nomes)[1] = 'ID'
# Se??o fixa dos gr?ficos -------------------------------------------------
# Gr?ficos ----------------------------------------------------------------
library(tidyverse)
library(ggrepel)
# install.packages('ggpmisc')
library(ggpmisc)
# install.packages('ggthemes')
library(ggthemes)
#Pacote para stat_cor
# install.packages('ggpubr')
library(ggpubr)
# Se??es fixas dos gr?ficos -----------------------------------------------
theme = theme_bw(base_size = 15) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"),
legend.position = "none")
theme_legenda = theme_bw(base_size = 15) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
# Dados Completos ---------------------------------------------------------
dados_completo = read.csv('datas/dados_completo.csv')
names(dados_completo)[1] = "Index"
lista_nomes_vazoes = names(dados_completo)[-c(1,2,3,21,22)]
library(reshape2)
meltdata_completo = melt(data = dados_completo,
id.vars = c("Index","Hora","Dia"),
measure.vars = lista_nomes_vazoes)
names(meltdata_completo)[4:5] = c("Variavel","Valor")
#Plot completo inicial sem os estacion?rios destacados
plot_completo = ggplot(meltdata_completo, aes(x = Index, y=Valor))+
geom_point(aes(color = Variavel), size = 1) +
xlab("Tempo (h)") +
ylab("Vari?veis") +
theme
# tiff("plot_completo.tiff", res = 300, width = 2000*1.2, height = 1600)
plot_completo
#Destacar partes do gr?fico
xminimo_1 = 120
xmaximo_1 = 340
rect1 = data.frame(xmin = xminimo_1, xmax = xmaximo_1, ymin = -Inf, ymax=+Inf)
rect2 = data.frame(xmin = 700, xmax = 765, ymin =-Inf, ymax=+Inf)
plot_completo = ggplot(meltdata_completo, aes(x = Index, y=Valor))+
geom_point(aes(color = Variavel), size = 1) +
xlab("Tempo (h)") +
ylab("Vari?veis") +
theme +
geom_rect(data=rect1, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill = "grey",
alpha=0.5,
inherit.aes = FALSE) +
geom_rect(data=rect2, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax),
fill = "grey",
alpha=0.5,
inherit.aes = FALSE)
# tiff("plot_completo_destacado_2.tiff", res = 300, width = 2000*1.2, height = 1600)
plot_completo
# Plot das duas vaz?es principais (entrada e sa?da de anidrido bru --------
plot_in_out = ggplot(subset(meltdata_completo, Variavel %in% c("FC0104","FC0619")),
aes(x = Index, y=Valor))+
geom_point(aes(color = Variavel), size = 1) +
xlab("Tempo (h)") +
ylab("Vaz?o m?ssica (kg/h)") +
theme
# tiff("plot_in_out.tiff", res = 300, width = 2000*1.2, height = 1600)
plot_in_out
# Segunda opera??o n?o ? estacion?ria? ----------------------------------------
plot_estacionario_falso = ggplot(subset(meltdata_completo, Index %in% c(700:765)),
aes(x = Index, y=Valor))+
geom_point(aes(color = Variavel), size = 1) +
xlab("Tempo (h)") +
ylab("Vari?veis") +
theme +
geom_vline(xintercept = 731, colour = "grey20")
# tiff("plot_estacionario_falso.tiff", res = 300, width = 2000*1.2, height = 1600)
plot_estacionario_falso
# MERGE DATA OPERATION 1 AND OPERATION 2 ----------------------------------
df_bind = dados_completo[c(xminimo_1:xmaximo_1,700:731),]
write.csv(df_bind, 'df_bind.csv')
df_bind = df_bind[,-c(21,22)]
df_bind$Index_bind = c(1:length(df_bind$Index))
# MERGED OPERATIONS --------------------------------------------------------------
lista_nomes_vazoes = names(df_bind)[-c(1,2,3,32)]
library(reshape2)
meltdata = melt(data = df_bind,
id.vars = c("Index","Hora","Dia","Index_bind"),
measure.vars = lista_nomes_vazoes)
names(meltdata)[5:6] = c("Variavel","Valor")
# PROCV MELT DATA PARA ADICIONAR AS GRANDEZAS ----------------------------------------------------------
vlookuplist = read.csv('datas/Lista_Nomes_PROCV.csv', encoding = 'UTF-8')
# meltdata_outliers = meltdata_outliers[,c(4,1,2,3,5)]
names(vlookuplist)[1] = 'ID'
meltdata_modified = merge(meltdata, vlookuplist, by.x = "Variavel", by.y = "ID", all.x = T, all.y = T)
plot_geral = ggplot(meltdata_modified, aes(y = Valor, x = Index_bind)) +
geom_point(aes(color = Variavel),na.rm = T) +
theme +
xlab('Registros de medidas') +
ylab('Valores')
# tiff("plot_pos_bind_sequencial.tiff", res = 300, width = 2000*1.2, height = 1600)
plot_geral
#Plot das vaz?es
ggplot(subset(meltdata_modified, Grandeza %in% "Vazao"), aes(x = Index, y = Valor)) +
geom_point(aes(color = Variavel))
#Boxplot de todos antes de retirar outliers:
boxplot_facet = ggplot(meltdata_modified, aes(x = Variavel, y = Valor)) +
geom_boxplot(aes(color = Grupo)) +
facet_wrap(.~Variavel, scales = "free") +
theme(strip.text.x = element_blank()) +
ylab('Valores') +
xlab(' ')
# tiff("boxplot_facet_before_out.tiff", width = 4200/1.5, height = 3800/2, res = 300)
boxplot_facet
#Histograma de todos antes de retirar outliers:
histogram_facet = ggplot(meltdata_modified, aes(x = Valor)) +
geom_histogram(aes(y = ..density.., color = Grupo, fill = Grupo)) +
facet_wrap(.~Variavel, scales = "free") +
ylab('Frequ?ncia') +
xlab(' ')
# tiff("histogram_facet_before_out.tiff", width = 4200/1.5, height = 3800/2, res = 225)
histogram_facet
#Retirar os outliers e plotar o boxplot novamente para comparar
nomesvariaveis = toString(unique(meltdata_modified$Variavel))
nomesvariaveis = unlist(strsplit(nomesvariaveis, ","))
df_bind_outliers = df_bind
for (variter in 4:ncol(df_bind_outliers)){
lower_bound_simples = mean(df_bind_outliers[,variter]) - 3*sd(df_bind_outliers[,variter])
upper_bound_simples = mean(df_bind_outliers[,variter]) + 3*sd(df_bind_outliers[,variter])
df_bind_outliers = df_bind_outliers[df_bind_outliers[,variter] > lower_bound_simples & df_bind_outliers[,variter] < upper_bound_simples,]
}
df_bind_outliers$Index_bind = NULL
df_bind_outliers$Index_bind = c(1:length(df_bind_outliers$Index))
# Retirar outliers bivariados ---------------------------------------------
pairs(df_bind_outliers[,c(4,5,6,7)])
mm = df_bind_outliers[,-c(1,2,3,32)]
#Dist?ncia estat?stica para cada observa??o:
maha = as.data.frame(mahalanobis(mm, colMeans(mm), cov(mm)))
names(maha)[1] = "Distancias"
maha$Index = c(1:nrow(maha))
alpha = 0.05
#O limite ? definido pelo chi quadrado
df = ncol(df_bind_outliers[,-c(1,2,3,32)])
limite <- qchisq(1-alpha, df = df)
is_mv_outlier = ifelse(maha$Distancias > limite, "SIM", "N?O")
df_bind_outliers$Outliers = is_mv_outlier
maha$Outliers = is_mv_outlier
rows = as.numeric(rownames(maha))
maha_dist = ggplot(maha, aes(x = Index, y = Distancias)) +
geom_point(aes(color = Outliers, shape = Outliers)) +
theme_legenda +
geom_hline(yintercept = limite) +
xlab("Registros de medidas") +
geom_text(aes(0,limite,label = round(limite), vjust = -1))
# tiff("maha_dist.tiff", width = 2000, height = 1400, res = 200)
maha_dist
#Retirar os outliers bivariados
df_bind_outliers = df_bind_outliers[df_bind_outliers$Outliers == "N?O",]
df_bind_outliers[33] = NULL
write.csv(df_bind_outliers, 'agrupamento.csv')
# Continua??o ap?s remo??o de outliers UNI e MULTIVARIADOS ----------------
#Melt do dataframe bind agoraa sem outliers:
lista_nomes_vazoes = names(df_bind_outliers)[-c(1,2,3,32)]
library(reshape2)
meltdata_outliers = melt(data = df_bind_outliers,
id.vars = c("Index","Hora","Dia","Index_bind"),
measure.vars = lista_nomes_vazoes)
names(meltdata_outliers)[5:6] = c("Variavel","Valor")
#PROCV EM R PARA ADICIONAR OS GRUPOS:----------------------------------------------------------------
vlookuplist = read.csv('datas/Lista_Nomes_PROCV.csv', encoding = 'UTF-8')
# meltdata_outliers = meltdata_outliers[,c(4,1,2,3,5)]
names(vlookuplist)[1] = 'ID'
m5 = merge(x = meltdata_outliers, y = vlookuplist, by.x = 'Variavel', by.y = 'ID', all.x = T, all.y = T)
#Histogramas e box plot ap?s retirar outliers
boxplot_facet = ggplot(m5, aes(x = Variavel, y = Valor)) +
geom_boxplot(aes(color = Grupo)) +
facet_wrap(.~Variavel, scales = "free") +
theme(strip.text.x = element_blank()) +
ylab('Valores') +
xlab(' ')
tiff('boxplot_apos_remocao_outliers.tiff',  width = 4200/1.5, height = 3800/2, res = 300)
boxplot_facet
dev.off()
histogram_facet = ggplot(m5, aes(x = Valor)) +
geom_histogram(aes(y = ..density.., color = Grupo, fill = Grupo)) +
facet_wrap(.~Variavel, scales = "free") +
ylab("Frequ?ncia") +
xlab(' ')
tiff("histogram_apos_remocao_outliers.tiff", width = 4200/1.5, height = 3800/2, res = 225)
histogram_facet
dev.off()
#Coluna para juntar os dois e diferenciar na hora do plot
meltdata_modified$L = "A"
m5$L = "B"
merged_boxplot = rbind(meltdata_modified, m5)
boxplot_facet = ggplot(merged_boxplot, aes(x = factor(L), y = Valor)) +
geom_boxplot(aes(color = Grupo)) +
facet_wrap(.~Variavel, scales = "free") +
theme(strip.text.x = element_blank()) +
ylab('Valores') +
xlab(' ')
tiff('merged_boxplot.tiff',  width = 4200/1.5, height = 3800/2, res = 300)
boxplot_facet
dev.off()
# Plot de tudo ap?s retirada dos OUTLIERS ---------------------------------
plot_no_outliers = ggplot(m5, aes(x = Index_bind, y=Valor))+
geom_point(aes(color = Variavel), size = 1) +
xlab("Tempo (h)") +
ylab("Vari?veis") +
theme
# Plot de vari?veis com histogramas estranhos -----------------------------
plot_estranhas = ggplot(subset(m5,
Variavel %in% c("FC0104","FC0105","FC0108","TC0213","FC0501","TI0201","TI0203","TI0204")),
aes(x = Index_bind, y=Valor))+
geom_point(aes(color = Variavel), size = 2) +
xlab("Registros de medidas") +
ylab("Valores") +
theme_bw()
tiff('plot_estranhas.tiff',  width = 4200/1.5, height = 3800/2, res = 300)
plot_estranhas
dev.off()
library(plotly)
ggplotly()
library(data.table)
DT = data.table(m5)
DT[,.N,by = Variavel]
#Plot teste de desvio padr?o
library(tidyverse)
ggplot(df_bind, aes(x = Index, y = PI0102)) +
geom_point() +
geom_hline(yintercept = (mean(df_bind$PI0102))) +
geom_hline(yintercept = lower_bound_simples) +
geom_hline(yintercept = upper_bound_simples)
# Correla??o --------------------------------------------------------------
# install.packages('corrplot')
# install.packages('Hmisc')
library(corrplot)
library(Hmisc)
dadosPCA = df_bind_outliers[,-c(1,2,3,21,22,32)]
corr = rcorr(as.matrix(dadosPCA))
# tiff('corrclust.tiff', height = 3000, width = 3000, res = 300)
corrclust = corrplot(corr$r,
method = 'square',
order = 'hclust',
addrect = 5,
col=colorRampPalette(c("red","white","darkblue"))(200),
tl.col = 'black')
corrplot(corr$r,
method = 'number',
order = 'hclust',
addrect = 5,
type = 'upper',
col=colorRampPalette(c("red","white","darkblue"))(200),
tl.col = 'black')
lista_melt_facet = names(df_bind_outliers)[-c(1,2,3,29,32)]
library(reshape2)
meltdata_facet = melt(data = df_bind_outliers,
id.vars = c("Index","Hora","Dia","FC0619"),
measure.vars = lista_melt_facet)
names(meltdata_facet)[5:6] = c("Variavel","Valor")
#Merge para colorir por opera??o:
m_facet_fc0619 = merge(meltdata_facet, vlookuplist, by.x = "Variavel", by.y = "ID", all.x = T, all.y = T)
myplot = ggplot(m_facet_fc0619, aes(x = Valor, y=FC0619)) +
geom_point(aes(color = Grupo), size = 2) +
facet_wrap(.~Variavel, scales = "free") +
ylab("Vaz?o de anidrido bruto") +
xlab(" ") +
geom_smooth(method = 'lm', se = T, formula = y ~ x) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
tiff("facet_anidrido.tiff", width = 1600*1.2, height = 1200, res = 150)
myplot
dev.off()
# PCA ---------------------------------------------------------------------
#PCA correla??o
pcacorr=prcomp(dadosPCA,scale=T)
summary(pcacorr)
names(pcacorr)
desvios_pca = pcacorr$sdev
loadings = pcacorr$rotation
df_loadings = as.data.frame(loadings)
medias = pcacorr$center
coordenadas = pcacorr$x
#Extraaindo mais valores do objeto PCA para realizar plots
library(factoextra)
pca_var2 = get_eigenvalue(pcacorr)
variancias = pca_var2$eigenvalue
# Screeplot ---------------------------------------------------------------
#Screeplot:
fviz_eig(pcacorr)
tiff("screeplot.tiff", width = 2000, height = 1600, res = 300)
plot(pca_var2$cumulative.variance.percent,type = 'b',
ylab = "Porcentagem da vari?ncia acumulada (%)",
xlab = "Componentes Principais")
abline(h=90,lty=2,lwd=1.5,col=2)
dev.off()
